/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: Usana Angular
 * Environment: Production
 * Id: 2d0653cd-a8dd-00ea-3fca-403eccd094c6
 * 
 * -------------------------------------------------------------------------------
 */

import type { CallToAction } from "../types/call-to-action-type.generated"
import type { Disclaimer } from "../types/disclaimer-type.generated"
import type { LandingPage } from "../types/landing-page-type.generated"
import type { Page } from "../types/page-type.generated"
import type { Product } from "../types/product-type.generated"

/*
 * Array of all type codenames
 */
export const typeCodenames = ["disclaimer", "call_to_action", "product", "page", "landing_page"] as const

/*
 * Type representing all type codenames
 */
export type TypeCodenames = (typeof typeCodenames)[number]

/*
 * Typeguard for type codename
 */
export function isTypeCodename(value: string | undefined | null): value is TypeCodenames {
	return typeof value === "string" && (typeCodenames as readonly string[]).includes(value)
}

/*
 * Core content type with narrowed types. Use this instead of'IContentItem' for increased type safety.
 */
export type CoreType = Disclaimer | CallToAction | Product | Page | LandingPage

/*
 * Type mapping for codename & type. Can be used for type safe access to type based on the codename of type.
 */
export type CodenameTypeMapping = {
	readonly disclaimer: Disclaimer
	readonly call_to_action: CallToAction
	readonly product: Product
	readonly page: Page
	readonly landing_page: LandingPage
}

/*
 * Helper type that returns type based on the codename of type.
 */
export type CodenameTypeMapper<TTypeCodename extends TypeCodenames> = TTypeCodename extends keyof CodenameTypeMapping
	? CodenameTypeMapping[TTypeCodename]
	: CoreType
